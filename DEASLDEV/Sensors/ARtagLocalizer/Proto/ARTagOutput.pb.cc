// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ARTagOutput.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace ARTag {

namespace {

const ::google::protobuf::Descriptor* ARTagMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ARTagMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ARTagMessage_Pose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ARTagMessage_Pose_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ARTagOutput_2eproto() {
  protobuf_AddDesc_ARTagOutput_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ARTagOutput.proto");
  GOOGLE_CHECK(file != NULL);
  ARTagMessage_descriptor_ = file->message_type(0);
  static const int ARTagMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage, oois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage, timestamp_),
  };
  ARTagMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ARTagMessage_descriptor_,
      ARTagMessage::default_instance_,
      ARTagMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ARTagMessage));
  ARTagMessage_Pose_descriptor_ = ARTagMessage_descriptor_->nested_type(0);
  static const int ARTagMessage_Pose_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, timestamp_),
  };
  ARTagMessage_Pose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ARTagMessage_Pose_descriptor_,
      ARTagMessage_Pose::default_instance_,
      ARTagMessage_Pose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARTagMessage_Pose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ARTagMessage_Pose));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ARTagOutput_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ARTagMessage_descriptor_, &ARTagMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ARTagMessage_Pose_descriptor_, &ARTagMessage_Pose::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ARTagOutput_2eproto() {
  delete ARTagMessage::default_instance_;
  delete ARTagMessage_reflection_;
  delete ARTagMessage_Pose::default_instance_;
  delete ARTagMessage_Pose_reflection_;
}

void protobuf_AddDesc_ARTagOutput_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ARTagOutput.proto\022\005ARTag\"\316\001\n\014ARTagMess"
    "age\022&\n\004oois\030\001 \003(\0132\030.ARTag.ARTagMessage.P"
    "ose\022\021\n\tcamera_id\030\002 \002(\r\022\021\n\ttimestamp\030\003 \002("
    "\001\032p\n\004Pose\022\n\n\002id\030\001 \002(\005\022\t\n\001x\030\002 \002(\001\022\t\n\001y\030\003 "
    "\002(\001\022\t\n\001z\030\004 \002(\001\022\013\n\003yaw\030\005 \002(\001\022\r\n\005pitch\030\006 \002"
    "(\001\022\014\n\004roll\030\007 \002(\001\022\021\n\ttimestamp\030\010 \002(\001", 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ARTagOutput.proto", &protobuf_RegisterTypes);
  ARTagMessage::default_instance_ = new ARTagMessage();
  ARTagMessage_Pose::default_instance_ = new ARTagMessage_Pose();
  ARTagMessage::default_instance_->InitAsDefaultInstance();
  ARTagMessage_Pose::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ARTagOutput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ARTagOutput_2eproto {
  StaticDescriptorInitializer_ARTagOutput_2eproto() {
    protobuf_AddDesc_ARTagOutput_2eproto();
  }
} static_descriptor_initializer_ARTagOutput_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ARTagMessage_Pose::kIdFieldNumber;
const int ARTagMessage_Pose::kXFieldNumber;
const int ARTagMessage_Pose::kYFieldNumber;
const int ARTagMessage_Pose::kZFieldNumber;
const int ARTagMessage_Pose::kYawFieldNumber;
const int ARTagMessage_Pose::kPitchFieldNumber;
const int ARTagMessage_Pose::kRollFieldNumber;
const int ARTagMessage_Pose::kTimestampFieldNumber;
#endif  // !_MSC_VER

ARTagMessage_Pose::ARTagMessage_Pose() {
  SharedCtor();
}

void ARTagMessage_Pose::InitAsDefaultInstance() {
}

ARTagMessage_Pose::ARTagMessage_Pose(const ARTagMessage_Pose& from) {
  SharedCtor();
  MergeFrom(from);
}

void ARTagMessage_Pose::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  yaw_ = 0;
  pitch_ = 0;
  roll_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ARTagMessage_Pose::~ARTagMessage_Pose() {
  SharedDtor();
}

void ARTagMessage_Pose::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ARTagMessage_Pose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARTagMessage_Pose_descriptor_;
}

const ARTagMessage_Pose& ARTagMessage_Pose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ARTagOutput_2eproto();  return *default_instance_;
}

ARTagMessage_Pose* ARTagMessage_Pose::default_instance_ = NULL;

ARTagMessage_Pose* ARTagMessage_Pose::New() const {
  return new ARTagMessage_Pose;
}

void ARTagMessage_Pose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
    z_ = 0;
    yaw_ = 0;
    pitch_ = 0;
    roll_ = 0;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ARTagMessage_Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }
      
      // required double x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }
      
      // required double y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &y_));
        _set_bit(2);
        if (input->ExpectTag(33)) goto parse_z;
        break;
      }
      
      // required double z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_z:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &z_));
        _set_bit(3);
        if (input->ExpectTag(41)) goto parse_yaw;
        break;
      }
      
      // required double yaw = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_yaw:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &yaw_));
        _set_bit(4);
        if (input->ExpectTag(49)) goto parse_pitch;
        break;
      }
      
      // required double pitch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_pitch:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &pitch_));
        _set_bit(5);
        if (input->ExpectTag(57)) goto parse_roll;
        break;
      }
      
      // required double roll = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_roll:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &roll_));
        _set_bit(6);
        if (input->ExpectTag(65)) goto parse_timestamp;
        break;
      }
      
      // required double timestamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &timestamp_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ARTagMessage_Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ARTagMessage_Pose::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required double x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }
  
  // required double y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }
  
  // required double z = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->z(), output);
  }
  
  // required double yaw = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->yaw(), output);
  }
  
  // required double pitch = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pitch(), output);
  }
  
  // required double roll = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->roll(), output);
  }
  
  // required double timestamp = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ARTagMessage_Pose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required double x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }
  
  // required double y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }
  
  // required double z = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->z(), target);
  }
  
  // required double yaw = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->yaw(), target);
  }
  
  // required double pitch = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pitch(), target);
  }
  
  // required double roll = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->roll(), target);
  }
  
  // required double timestamp = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ARTagMessage_Pose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required double x = 2;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 3;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required double z = 4;
    if (has_z()) {
      total_size += 1 + 8;
    }
    
    // required double yaw = 5;
    if (has_yaw()) {
      total_size += 1 + 8;
    }
    
    // required double pitch = 6;
    if (has_pitch()) {
      total_size += 1 + 8;
    }
    
    // required double roll = 7;
    if (has_roll()) {
      total_size += 1 + 8;
    }
    
    // required double timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ARTagMessage_Pose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ARTagMessage_Pose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ARTagMessage_Pose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ARTagMessage_Pose::MergeFrom(const ARTagMessage_Pose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_z(from.z());
    }
    if (from._has_bit(4)) {
      set_yaw(from.yaw());
    }
    if (from._has_bit(5)) {
      set_pitch(from.pitch());
    }
    if (from._has_bit(6)) {
      set_roll(from.roll());
    }
    if (from._has_bit(7)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ARTagMessage_Pose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARTagMessage_Pose::CopyFrom(const ARTagMessage_Pose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARTagMessage_Pose::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void ARTagMessage_Pose::Swap(ARTagMessage_Pose* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(yaw_, other->yaw_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ARTagMessage_Pose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ARTagMessage_Pose_descriptor_;
  metadata.reflection = ARTagMessage_Pose_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ARTagMessage::kOoisFieldNumber;
const int ARTagMessage::kCameraIdFieldNumber;
const int ARTagMessage::kTimestampFieldNumber;
#endif  // !_MSC_VER

ARTagMessage::ARTagMessage() {
  SharedCtor();
}

void ARTagMessage::InitAsDefaultInstance() {
}

ARTagMessage::ARTagMessage(const ARTagMessage& from) {
  SharedCtor();
  MergeFrom(from);
}

void ARTagMessage::SharedCtor() {
  _cached_size_ = 0;
  camera_id_ = 0u;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ARTagMessage::~ARTagMessage() {
  SharedDtor();
}

void ARTagMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ARTagMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARTagMessage_descriptor_;
}

const ARTagMessage& ARTagMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ARTagOutput_2eproto();  return *default_instance_;
}

ARTagMessage* ARTagMessage::default_instance_ = NULL;

ARTagMessage* ARTagMessage::New() const {
  return new ARTagMessage;
}

void ARTagMessage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    camera_id_ = 0u;
    timestamp_ = 0;
  }
  oois_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ARTagMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ARTag.ARTagMessage.Pose oois = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oois:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_oois()));
        if (input->ExpectTag(10)) goto parse_oois;
        if (input->ExpectTag(16)) goto parse_camera_id;
        break;
      }
      
      // required uint32 camera_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_camera_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &camera_id_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_timestamp;
        break;
      }
      
      // required double timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &timestamp_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ARTagMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ARTagMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .ARTag.ARTagMessage.Pose oois = 1;
  for (int i = 0; i < this->oois_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->oois(i), output);
  }
  
  // required uint32 camera_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->camera_id(), output);
  }
  
  // required double timestamp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ARTagMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ARTag.ARTagMessage.Pose oois = 1;
  for (int i = 0; i < this->oois_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->oois(i), target);
  }
  
  // required uint32 camera_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->camera_id(), target);
  }
  
  // required double timestamp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ARTagMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 camera_id = 2;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_id());
    }
    
    // required double timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .ARTag.ARTagMessage.Pose oois = 1;
  total_size += 1 * this->oois_size();
  for (int i = 0; i < this->oois_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oois(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ARTagMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ARTagMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ARTagMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ARTagMessage::MergeFrom(const ARTagMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  oois_.MergeFrom(from.oois_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_camera_id(from.camera_id());
    }
    if (from._has_bit(2)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ARTagMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARTagMessage::CopyFrom(const ARTagMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARTagMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < oois_size(); i++) {
    if (!this->oois(i).IsInitialized()) return false;
  }
  return true;
}

void ARTagMessage::Swap(ARTagMessage* other) {
  if (other != this) {
    oois_.Swap(&other->oois_);
    std::swap(camera_id_, other->camera_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ARTagMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ARTagMessage_descriptor_;
  metadata.reflection = ARTagMessage_reflection_;
  return metadata;
}


}  // namespace ARTag
